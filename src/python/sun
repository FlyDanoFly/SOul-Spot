#!/usr/bin/env python

import argparse
import logging
import sys
import time

import yaml

from effects import effects
from managers.EffectManager import EffectManager
from managers.PixelMatrix import PixelMatrix
from utils.send import PixelSender


LOGGING_LEVELS = ('CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG', 'NOTSET')
DEFAULT_LOGGING_LEVEL = 'INFO'


def setup_logging(log_level):
    logging.basicConfig(level=log_level)


def main():
    sys.path.append('/home/ArchLinux/dano/Projects/soul-spot/src/python/effects')
    
    #
    # Parse the command line
    parser = argparse.ArgumentParser(description='Run effects on the SOuL Dome simulation')
    parser.add_argument('config', help='YAML config file specifying all the effects to run')
    args = parser.parse_args()

    with open(args.config, 'r', encoding='utf-8') as inf:
        effects_config = yaml.safe_load(inf.read())

    #
    # Set up the logger
    setup_logging(effects_config.get('log_level', 'INFO').upper())
    logger = logging.getLogger(__name__)


    #
    # Create the "base" pixel matrix
    # Effects will be layered onto this one and this will be sent
    pixels = PixelMatrix()
    pixels.read_pixels_from_json(effects_config['pixel_file'])


    #
    # Set up the effect class to run
    effect_manager = EffectManager()
    for effect_config in effects_config['effects']:
        effect_name = effect_config['name']
        effect_arguments = effect_config['arguments']
        effect_class = effects[effect_name]
        effect = effect_class()
        effect.setup(**effect_arguments)
        effect_manager.add_effect(effect)
        logger.info(f'Added effect: {effect_name} with arguments {effect_arguments}')

    #
    # Set up the connector that delivels the pixels
    sender = PixelSender(len(pixels))
    logger.debug('Opening connection')
    sender.open_connection(port=effects_config['port'])
    effect_manager.add_sender(sender)

    try:
        logger.debug('Starting the effects')
        time_start = time.time()
        effect_manager.start()
    except KeyboardInterrupt:
        logger.debug('Keyboard interrupt, stopping')
    except BrokenPipeError as e:
        logger.debug('Connection was closed, exiting')
    # except Exception as e:
    #     logger.exception('Unhandled exception:', e)
    finally:
        time_end = time.time()
        logger.debug('Closing connection')
        sender.close_connection()

    time_delta = time_end - time_start
    if effects_config.get('stats', True):
        print(f'Stats: {sender.num_sends} sends in {time_delta} seconds == {sender.num_sends / time_delta} sends/s')


if __name__ == '__main__':
    main()